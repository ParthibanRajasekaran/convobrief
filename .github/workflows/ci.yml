name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true
          
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-lint-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          
      - name: Install dependencies
        run: |
          poetry install --no-interaction --only dev --no-root
        
      - name: Install project (editable)
        run: |
          poetry run pip install -e . --no-deps
        
      - name: Run ruff
        run: poetry run ruff check src tests
        
      - name: Run black
        run: poetry run black --check src tests

  typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true
          
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-typecheck-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          
      - name: Install dependencies
        run: |
          poetry install --no-interaction --only dev --no-root
          poetry run pip install types-requests types-setuptools
        
      - name: Install project (editable)
        run: |
          poetry run pip install -e . --no-deps
        
      - name: Run mypy
        run: poetry run mypy src --install-types --non-interactive || true

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true
          
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-test-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          
      - name: Install minimal dependencies for unit tests
        run: |
          poetry install --no-interaction --only dev --no-root
          poetry run pip install pydantic pydantic-settings numpy intervaltree structlog
        
      - name: Install project (editable)
        run: |
          poetry run pip install -e . --no-deps
        
      - name: Run unit tests
        run: |
          export PYTHONPATH="${PYTHONPATH}:${GITHUB_WORKSPACE}/src"
          poetry run pytest tests/unit -v
        
      - name: Run unit tests with coverage
        if: matrix.python-version == '3.11'
        run: |
          export PYTHONPATH="${PYTHONPATH}:${GITHUB_WORKSPACE}/src"
          poetry run pytest tests/unit -v --cov=src/insightsvc --cov-report=xml
        
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        if: matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
